@using CommunityToolkit.Maui.Storage;
@namespace BudgetAnalyzer.Shared.Layout
@inherits SubscribedComponent

<MudAppBar>
    <MudMenu Icon="@Icons.Material.Filled.Menu">
        <MudMenuItem Icon="@Icons.Material.Filled.FileUpload" OnClick="FileUpload">
            Upload App Data
        </MudMenuItem>

        <MudMenuItem Icon="@Icons.Material.Filled.FileDownload" OnClick="FileDownload">
            Download App Data
        </MudMenuItem>
    </MudMenu>
    <MudSpacer />

    <MudButtonGroup Color="Color.Tertiary" Variant="Variant.Text">
        <MudButton>
            <MudNavLink Href="/" Match="NavLinkMatch.All">Home</MudNavLink>
        </MudButton>
        <MudButton>
            <MudNavLink Href="/settings" Match="NavLinkMatch.Prefix">Settings</MudNavLink>
        </MudButton>
    </MudButtonGroup>
    <MudSpacer />

    <MudIconButton Icon="@Icons.Material.Filled.Code" Href="https://github.com/Jorden-Quast/BudgetAnalyzer" />
</MudAppBar>

@code{
    public async Task FileUpload()
    {
        FilePickerFileType allowedFileTypes = new(
                new Dictionary<DevicePlatform, IEnumerable<string>>
                {
                    { DevicePlatform.WinUI, new[] { ".json" } }
                });

        PickOptions options = new() { FileTypes = allowedFileTypes };
        FileResult? fileResult = await FilePicker.PickAsync(options);
        if (fileResult is null) return;

        Stream fileStream = await fileResult.OpenReadAsync();
        StreamReader reader = new(fileStream);

        string fileText = await reader.ReadToEndAsync();
        AddAction(new SetAppFromJsonAction(fileText));
    }

    public async Task FileDownload() => await FileSaver.SaveAsync("AppData.json", new MemoryStream(State.ToJsonByteArray(true)));
}
