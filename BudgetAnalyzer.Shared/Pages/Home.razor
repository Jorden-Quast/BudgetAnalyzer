@page "/"
@using BudgetAnalyzer.Shared.Data
@inherits SubscribedComponent


<MudContainer>
    <MudForm @ref=FormRef IsValid=true>
        <MudTextField Label="Budget Name" @bind-Value=BudgetName />

        <MudTable T="BudgetCategory" Items="BudgetCategories" Hover="true" Elevation="0"
                  EditTrigger="TableEditTrigger.RowClick" OnPreviewEditClick="StartEditing" OnCommitEditClick="FinishEditing">
            <ToolBarContent>
                <MudText>Categories</MudText>
                <MudSpacer />
                <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddCategory">Add New Category</MudButton>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Fractional Percentage</MudTh>
                <MudTh>Cutoff</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Fractional Percentage">@context.Percentage</MudTd>
                <MudTd DataLabel="Cutoff">@(context.Cutoff is null ? "N/A" : context.Cutoff.ToString())</MudTd>
            </RowTemplate>

            <RowEditingTemplate>
            </RowEditingTemplate>
        </MudTable>

        <MudButton OnClick="CreateBudget" Disabled="IsValid">Create Budget</MudButton>
    </MudForm>
</MudContainer>

@code{
    private MudForm? FormRef { get; set; }
    private bool IsValid { get; set; } = false;

    private string BudgetName { get; set; } = "New Budget";
    private List<BudgetCategory> BudgetCategories { get; } = new();

    private int? EditingIndex { get; set; }
    private BudgetCategory TempCategory { get; set; } = BudgetCategory.Default;

    private void AddCategory() => BudgetCategories.Add(BudgetCategory.Default);

    // TODO: This will break if two budgets are exactly identical, validate uniqueness somehow? Or figure out way to give an ID
    private void StartEditing(object editingObject)
    {
        if (editingObject is not BudgetCategory category) throw new Exception($"Something went wrong. {nameof(editingObject)} should be a {nameof(BudgetCategory)}");
        EditingIndex = BudgetCategories.FindIndex(0, c => c == category);
        TempCategory = category;
    }

    private void FinishEditing(object finishedObject)
    {
        if (EditingIndex is not int index) throw new Exception($"Something went wrong. {nameof(EditingIndex)} should not be null");
        BudgetCategories[index] = TempCategory;
        EditingIndex = null;
    }

    private void CreateBudget()
    {
        Budget newBudget = new(BudgetName, BudgetCategories);

    }
}
